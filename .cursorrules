# Cursor AI Configuration for Next.js Project

## Project Context

- Next.js 15 with App Router and src directory
- always use src directory
- TurboPack
- AuthJS
- always use typescript
- Server Components
- Native fetch API for data fetching
- No state management library
- Motion for animations
- No complex interactions
- Prisma ORM for database access

## Preferred Behaviors

- Prioritize server-side component suggestions
- Always use the src directory for project code
- always use the app directory for the routes
- Suggest simple, performant solutions
- Avoid complex state management patterns

## Code Style

- Use modern JavaScript/TypeScript
- Follow Next.js best practices
- Implement tailwind classes correctly
- Maintain clean, documented code
- Apply TDD principles and write tests for all new features before implementing them.

## AI Assistance Rules

1. Prioritize:

   - Server component implementations
   - tailwind class usage
   - Performance optimizations
   - Clean code structure

2. Avoid Suggesting:

   - Complex state management solutions
   - Animation libraries
   - Custom styling when tailwind classes do not suffice
   - Client-side heavy implementations

3. Code Generation:

   - Include JSDoc comments for complex functions
   - Add type hints where helpful
   - Include error handling
   - Follow Next.js naming conventions

4. Documentation:

   - Explain key implementation decisions
   - Note tailwind class usage
   - Highlight server/client component boundaries
   - Include performance considerations

5. commit messages:

   - use imperative, present tense
   - include the file name
   - include a short description of the changes
   - include the issue number if applicable
   - include the user who requested the change if applicable
   - include the ticket number if applicable
   - include the ticket title if applicable
   - ALWAYS start the message with a gitmoji followed by a colon and text corresponding to the emoji.
   - use gitmoji.dev for reference
   - Use Gitmojis
   - do not always use :sparkles: for every commit. use the gitmoji site to find the best emoji for the commit.
   - message should be no more than 100 characters

6. prisma:
   - prisma schema file is /prisma/schema.prisma
   - prisma client is in /src/lib/prisma.ts

## File Organization

- Follow Next.js 15 app directory structure
- Keep components modular
- Separate server and client concerns
- Maintain clear import/export patterns

# commit Message examples

reference : https://gitmoji.dev/

- :sparkles: : Add new feature
- :bug: : Fix bug
- :memo: : Add documentation
- :fire: : Remove code
- :art: : Improve code readability
- :rocket: : Improve performance
- :green_heart: : Fix CI build
- :construction: : Work in progress
- :recycle: : Refactor code
- :bookmark: : Release new version
- :white_check_mark: : add code that makes the tests pass
- :test_tube: : add failing tests
- :hammer: : add code that fixes the tests
- :heavy_plus_sign: : add a new dependency or library
- :heavy_minus_sign: : remove a dependency or library
- :lock: : add security features
- :speech_balloon: : add comments
- :rotating_light: : fix linting errors
- :recycle: : refactor code
- :arrow_up: : update dependencies
- :arrow_down: : downgrade dependencies
- :pencil2: : fix typos
- :alien: : add code for external API
- :robot: : add code for AI and automation
- :dizzy: : add code for animation
- :lipstick: : add code for styling
- :card_file_box: : add code for database
- :loud_sound: : add logging
- :speech_left: : add code for speech recognition
- :speech_right: : add code for speech synthesis
- :speech_balloon: : add code for speech to text
- :speech_left: : add code for text to speech
- :children_crossing: : add code for accessibility
- :clown_face: : add code for mocking
- :mag: : add code for SEO
- :seedling: : add code for seeding
- :goal_net: : error handling and catching
- :wastebasket: : deprecate code
- :coffin: : remove code
