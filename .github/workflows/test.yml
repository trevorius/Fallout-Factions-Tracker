name: 🧪 Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Jest Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🏗️ Build project
        run: npm run build
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/testdb"

      - name: 🧪 Run Jest tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests --verbose
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://user:password@localhost:5432/testdb"
        id: jest-tests

      - name: 📝 Test Results Summary
        if: always()
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js Version: ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Status: ${{ steps.jest-tests.outcome }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.jest-tests.outcome }}" = "failure" ]; then
            echo "- ❌ **TESTS FAILED** - See logs for details" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Check the Jest test step above for failing test details" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Coverage Report: Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload coverage reports to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📊 Generate coverage summary
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Percentage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------------|" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | $(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | $(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | $(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')% |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | $(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Node.js Version:** ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "Coverage summary not available - tests may have failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📝 Create PR comment
        if: github.event_name == 'pull_request' && always()
        run: |
          # Determine status emoji and message
          if [ "${{ steps.jest-tests.outcome }}" = "success" ]; then
            STATUS_EMOJI="✅"
            STATUS_MESSAGE="All tests passed"
          else
            STATUS_EMOJI="❌"
            STATUS_MESSAGE="Tests failed - check logs for details"
          fi
          
          if [ -f coverage/coverage-summary.json ]; then
            STATEMENTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
            BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')
            FUNCTIONS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')
            LINES=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
            
            cat > pr-comment.md << EOF
          ## 🧪 Test Results - Node.js ${{ matrix.node-version }}
          
          **Test Status:** ${STATUS_EMOJI} ${{ steps.jest-tests.outcome }} - ${STATUS_MESSAGE}
          
          ### 📊 Coverage Summary
          | Metric | Percentage |
          |--------|------------|
          | Statements | ${STATEMENTS}% |
          | Branches | ${BRANCHES}% |
          | Functions | ${FUNCTIONS}% |
          | Lines | ${LINES}% |
          
          $(if [ "${{ steps.jest-tests.outcome }}" = "failure" ]; then
            echo "### 🔍 Next Steps"
            echo "- Check the [workflow logs](https://github.com/trevorius/Fallout-Factions-Tracker/actions) for detailed test failure information"
            echo "- Fix failing tests before merging"
          fi)
          
          *Updated: $(date)*
          EOF
          else
            cat > pr-comment.md << EOF
          ## 🧪 Test Results - Node.js ${{ matrix.node-version }}
          
          **Test Status:** ${STATUS_EMOJI} ${{ steps.jest-tests.outcome }} - ${STATUS_MESSAGE}
          
          ### ⚠️ Coverage Summary
          Coverage data not available - tests may have failed
          
          $(if [ "${{ steps.jest-tests.outcome }}" = "failure" ]; then
            echo "### 🔍 Next Steps"
            echo "- Check the [workflow logs](https://github.com/trevorius/Fallout-Factions-Tracker/actions) for detailed test failure information"
            echo "- Fix failing tests before merging"
          fi)
          
          *Updated: $(date)*
          EOF
          fi

      - name: 📈 Comment coverage on PR
        if: github.event_name == 'pull_request' && always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: pr-comment.md